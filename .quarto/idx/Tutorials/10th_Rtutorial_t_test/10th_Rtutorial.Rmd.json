{"title":"Tutorial","markdown":{"yaml":{"title":"Tutorial","output":"learnr::tutorial","runtime":"shiny_prerendered"},"headingText":"Introduction:","containsRefs":false,"markdown":"\n\n```{r setup, include=FALSE}\nlibrary(learnr)\nlibrary(mosaic)\nlibrary(openintro)\nknitr::opts_chunk$set(echo = FALSE)\n```\n\n\n\nIn this tutorial we will get familiar with a few of the functions necessary to complete hypothesis testing and confidence interval building with the Student's t-distribution. For more information on the Student's t-distribution please see the chapter 7 reading section. There is no assignment associated with this section but you'll use these skills in your homework. \n\n## Hypothesis test setup\n\n1. I've preloaded the `mosaic` and `openintro` libraries. If you are working in a blank .Rmd file you'll have to load those. \n\n\n2. Use the chunk below to look at the `prius_mpg` data frame, which is different than the data referenced in HW 7. \n\n```{r prius, exercise = TRUE}\n\n```\n\n\n```{r prius-hint}\nView(prius_mpg)\n?prius_mpg\n```\n\n3. We can assume independence, because all the values are different, different owners driving different cars. We need to check normality. The sample size is less than 30, so we need to make sure there are no outliers. Make a boxplot of the `average_mpg` variable in the chunk below to verify. \n\n```{r outliers, exercise = TRUE}\ngf_boxplot()\n```\n\n\n```{r outliers-hint}\ngf_boxplot(~average_mpg,data=prius_mpg)\n```\n\n4. fueleconomy.gov says that the gas and electric engine of the prius will give a combined fuel economy of 133 MPGe. Let's assume that to be the parameter for average MPGe and test whether it is actually greater with the sample provided from `prius_mpg`\n\n$H_0: \\mu = 133$\n$H_1: \\mu > 133$\n\n$\\alpha= 0.05$\n\n## Execute the test\n\n1. The arguments are nearly the same as the prop.test() hypothesis test from the 9th Rtutorial, except, since we are testing an average not a proportion we use `mu=133` instead of `p=133`. Try to fill in the blanks below.  \n\n```{r test, exercise = TRUE}\nt.test(~,mu=,data=, alternative=\"\")\n```\n\n\n```{r test-hint}\nt.test(~average_mpg,mu=133,data=prius_mpg,alternative=\"greater\")\n```\n\noptional: Just like with the `prop.test()` you can save the results and only call up the p-value. Try it in the chunk below. \n\n```{r optional, exercise = TRUE}\nt.test_results<- t.test(~average_mpg,mu=133,data=prius_mpg,alternative=\"greater\")\nt.test_results\n```\n\n```{r optional-hint}\nt.test_results<- t.test(~average_mpg,mu=133,data=prius_mpg,alternative=\"greater\")\nt.test_results$p.value\n```\n\n2. At this point we can write our conclusion. The p-value = 0.23 which is greater than $\\alpha =0.05$. We fail to reject the null hypothesis. It is likely that even if the true average MPGe is 133 we could collect a sample of 19 cars with a sample average of $\\bar{x}=144.9$. \n\n## How to calculate test statistics and critical values. \n\nSome homework problems will want to you calculate the t-scores called the test statistic and the critical value.  To do this we will use `xqt()` from the `mosaic` package. Which calculates the quantiles of a t-distribution. \n\n### Test Statistic\n\n1. Remember the p-value is the probability that gives the t-score from the relevant t-distribution. `xqt()` takes the p-value and degrees of freedom for arguments and outputs the test statistic. Put the arguments into the code below. We want to add `lower.tail = FALSE` because we did a right tailed test.\n\n```{r test-stat, exercise = TRUE}\nxqt(p= , df=, lower.tail = FALSE)\n```\n\n```{r test-stat-hint}\nxqt(p=0.2309915 , df=18, lower.tail=FALSE)\n```\n\nNotice the test statistic is the same as the one that was output in our test in the last section, so R will find this for us when given a set of data. We only need it if given a p-value and asked for the test Statistic. \n\n### Critical Value\n\nFinding the critical value is the same as finding the test statistic, except the critical value is based on whatever you chose for alpha. In the chunk below type the code we would use to find the critical value for this hypothesis test. \n\n```{r crit-value, exercise = TRUE}\nxqt(p= , df=, lower.tail = FALSE)\n```\n\n```{r crit-value-hint}\nxqt(p=0.05 , df=18, lower.tail=FALSE)\n```\n\n## Finding p-values from test statistics. \n\nIf you find a test statistic by hand or are given one, you will want to calculate its p-value. We'll use `xpt()` from the mosaic package for this. \n\n1. Remember the test statistic gives the p-value in a particular distribution. `xpt()` takes the test statistic and df for arguments. Find the p-value for the test statistic from our problem. \n\n```{r p-value-from-test-stat, exercise=TRUE, }\nxpt(q=,df=)\n\n```\n\n\n```{r p-value-from-test-stat-hint, exercise=TRUE}\n# The answer is not 0.769, set lower.tail=FALSE\nxpt(q=0.7516402,df=18,lower.tail=FALSE)\n```\n\n\n\n## No Assignment Due \n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":"learnr::tutorial","warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"10th_Rtutorial.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.0.37","title":"Tutorial","runtime":"shiny_prerendered"},"extensions":{"book":{"multiFile":true}}}}}